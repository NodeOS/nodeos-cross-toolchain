#!/usr/bin/env node

var join = require('path').join

var async   = require('async')
var fs      = require('fs-extra')
var manager = require('download-manager')
var os      = require('os')


const DEPS='deps'

const options = {path: DEPS}


// Source versions

const BINUTILS_VERSION = "2.27"
const GCC_VERSION      = "5.3.0"
const LINUX_VERSION    = "4.7.1"
const MUSL_VERSION     = "1.1.15"
const GLIBC_VERSION    = "2.24"


// Source URLs

const BINUTILS_URL = "http://ftpmirror.gnu.org/binutils/binutils-"+BINUTILS_VERSION+".tar.gz"
const GCC_URL      = "http://ftpmirror.gnu.org/gcc/gcc-"+GCC_VERSION+"/gcc-"+GCC_VERSION+".tar.gz"
const LINUX_URL    = "https://www.kernel.org/pub/linux/kernel/v4.x/linux-"+LINUX_VERSION+".tar.gz"
const MUSL_URL     = "http://www.musl-libc.org/releases/musl-"+MUSL_VERSION+".tar.gz"
const GLIBC_URL    = "http://ftpmirror.gnu.org/glibc/glibc-"+GLIBC_VERSION+".tar.gz"


// Checksums

const LINUX_SHA256 = '3bf449c75723494a55e623afb4e50bca5795f213a51c87e6c031a72cc74f7359'


// Patch GCC to work with musl
const GCC_PATCH_URL = 'https://raw.githubusercontent.com/GregorR/musl-cross/master/patches/gcc-'+GCC_VERSION+'-musl.diff'


// Patch Linux to use GLIBC headers
const LINUX_PATCH_PATH = 'patches/linux-darwin.diff'


//
// gcc prerequisites
//

function download_prerequisites(callback)
{
  // Download source code of mpfr, gmp & mpc
//    contrib/download_prerequisites

  var name = this.name

  // Source versions

  const MPFR_VERSION = "3.1.4"
  const GMP_VERSION  = "6.1.1"
  const MPC_VERSION  = "1.0.2"


  // Source URLs

  const MPFR_URL = "http://www.mpfr.org/mpfr-"+MPFR_VERSION+"/mpfr-"+MPFR_VERSION+".tar.gz"
  const GMP_URL  = "https://gmplib.org/download/gmp/gmp-"+GMP_VERSION+".tar.bz2"
  const MPC_URL  = "http://ftpmirror.gnu.org/mpc/mpc-"+MPC_VERSION+".tar.gz"


  var downloads =
  [
    {
      name: join(name, 'mpfr'),
      url: MPFR_URL
    },
    {
      name: join(name, 'gmp'),
      url: GMP_URL
    },
    {
      name: join(name, 'mpc'),
      url: MPC_URL
    }
  ]


  manager(downloads, options, callback)
}


//
// include glibc headers in linux
//

function copy_headers(callback)
{
  const GLIBC_PATH = DEPS+'/glibc'
  const TEMP_PATH = DEPS+'/glibc-temp'

  async.series(
  [
    function(callback)
    {
      async.each(['bits', 'elf', 'gnu', 'string'].map(function(item)
      {
        return GLIBC_PATH+'/'+item
      }),
      fs.mkdirp, callback)
    },
    function(callback)
    {
      fs.outputFile(GLIBC_PATH+'/bits/types.h', '', callback)
    },
    function(callback)
    {
      async.eachOf(require('../resources/copy_headers.json'),
      function(dest, src, callback)
      {
        fs.copy(TEMP_PATH+'/'+src, GLIBC_PATH+'/'+dest, callback)
      },
      callback)
    },
  ],
  callback)
}


//
// binutils, gcc, Linux & musl
//

var downloads =
[
  {
    name: 'binutils',
    url: BINUTILS_URL
  },
  {
    name: 'gcc',
    url: GCC_URL,
    patch: GCC_PATCH_URL,
    strip: 1,
    action: download_prerequisites
  },
  {
    name: 'linux',
    url: LINUX_URL,
    sha256: LINUX_SHA256
  },
  {
    name: 'musl',
    url: MUSL_URL
  }
]

if(process.platform === 'darwin')
{
  downloads[2].patch = LINUX_PATCH_PATH

  downloads.push({
    name: 'glibc-temp',
    url: GLIBC_URL,
    action: copy_headers
  })
}


manager(downloads, options, function(error)
{
  if(error)
  {
    console.trace(error)
    process.exit(1)
  }
})
